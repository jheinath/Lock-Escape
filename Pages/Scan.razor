@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Drawing
@using SixLabors.ImageSharp.Drawing.Processing
@using SixLabors.ImageSharp.Processing;
@using SixLabors.Fonts
@using System.IO

@page "/scan"


<PageTitle>Lock Escape</PageTitle>

<div class="container-fluid d-flex justify-content-center align-items-center w-100 h-75">
    <div class="row d-flex flex-wrap">
        <div class="col">
            <div class="card border-primary bg-primary rounded-0">
                <div class="card-header text-center">
                    <h4 class="text-white">Scan QR code from your teacher!</h4>
                </div>
                <div class="card-body d-flex justify-content-center text-white bg-white">
                    <video id="videoFeed" width="320" height="240"></video>
                    <canvas class="d-none" id="currentFrame" width="320" height="240"></canvas><br/>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private readonly string _captionText = null!;

    readonly FontCollection _collection = new ();
    FontFamily _sansFamily = null!;
    Font _captionFont = null!;

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("startVideo", "videoFeed");

    //Font stored in wwwroot. Fetch it as byte array, and use it
        var fontBytes = await Http.GetByteArrayAsync("OpenSans-Regular.ttf");
        _collection.Install(new MemoryStream(fontBytes));
        _collection.TryFind("Open Sans", out _sansFamily!);
        _captionFont = _sansFamily.CreateFont(16, FontStyle.Regular);
    }

    private async Task CaptureFrame()
    {
        await JSRuntime.InvokeAsync<string>("getFrame", "videoFeed", "currentFrame", DotNetObjectReference.Create(this));
    }


    [JSInvokable]
    public void ProcessImage(string imageString)
    {
        var imageData = Convert.FromBase64String(imageString.Split(',')[1]);

        //Do image processing here
        var alignCenter = new DrawingOptions
        {
            TextOptions = new TextOptions
            {
                VerticalAlignment = VerticalAlignment.Center,
                WrapTextWidth = 304, //Image is 320px wide. This will center with 8px margin on left and right
                HorizontalAlignment = HorizontalAlignment.Center
            }
        };

        using var image = Image.Load(imageData);
        image.Mutate(x => x
            .Flip(FlipMode.Horizontal) //To match mirrored webcam image
            .Fill(Color.ParseHex("0008"), new RectangularPolygon(0,220, 320, 20)) //Set footer bar for caption
            .DrawText(alignCenter, _captionText, _captionFont, Color.White, new PointF(8, 230)) //center in footer bar)
            );
    }
}