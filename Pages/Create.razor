@page "/create"
@using Application.Enums
@using Application.Ports
@using FluentResults
@using LockEscape.Services.DecodingFromQueryParameters
@using LockEscape.Services.EncodingToQueryParameters
@using System.Globalization
@using Blazored.LocalStorage
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject ICreateGameCommand CreateGameCommand
@inject IGenerateQueryParametersService GenerateQueryParametersService
@inject IDecodeFromQueryParametersService DecodeFromQueryParametersService
@inject ILocalStorageService LocalStorageService

<PageTitle>Lock Escape</PageTitle>

<div class="container d-flex justify-content-center align-items-center w-100">
    <div class="row g-2 w-100">
        <div class="col-12">
            <div class="card border-success bg-success rounded-0">
                <div class="card-header text-center">
                    <h4 class="text-white mb-0">
                        @if (_isEditMode && !_onlyQrCode)
                        {
                            @(_Create.EditGame)
                        }
                        else if (_onlyQrCode)
                        {
                            @(_Create.ScanMe)
                        }
                        else
                        {
                            @(_Create.CreateNewGame)
                        }
                        @if (!_onlyQrCode)
                        {
                        }
                    </h4>
                </div>

                <div class="card-body d-flex justify-content-center container bg-white w-100">
                    <div class="w-100">
                        @if (_isPasswordProvided)
                        {
                            @if (!_onlyQrCode)
                            {
                                @if (_errors.Any())
                                {
                                    <div class="row w-100">
                                        <div class="col-12">
                                            <div class="alert alert-warning" role="alert">
                                                @_errors.First().Message
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="row w-100">
                                    <div class="col-6">
                                        <div class="form-group">
                                            <label for="lang">@_Create.GameLanguage</label>
                                            <select class="form-control" id="lang" @bind="_language">
                                                <option value="@Language.English">@_Create.English</option>
                                                <option value="@Language.German">@_Create.German</option>
                                                <option value="@Language.French">@_Create.French</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="form-group">
                                            <label for="countRiddles">@_Create.AmountRiddles</label>
                                            <input type="number" min="1" max="30" class="form-control" id="countRiddles" @bind="_amountGames">
                                        </div>
                                    </div>
                                </div>
                                <div class="row w-100">
                                    <div class="col-6">
                                        <div class="form-group">
                                            <label for="password">@_Create.CreatorPassword</label>
                                            <input type="text" class="form-control" id="password" @bind="_creatorPassword">
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="form-group">
                                            <label for="countGroups">@_Create.AmountGroups</label>
                                            <input type="number" min="1" max="30" class="form-control" id="countGroups" @bind="_amountGroups">
                                        </div>
                                    </div>
                                </div>
                                <hr/>
                                <div class="row">
                                    @for (var i = 0; i < _amountGroups; i++)
                                    {
                                        var j = i;
                                        <div class="col-6">
                                            <div class="form-group">
                                                <label for="@($"group{i}game-solution")">@_Create.GameSolutionGroup @(j + 1)</label>
                                                <input value="@_gameSolutions.ElementAtOrDefault(j)" type="text" class="form-control" id="@($"group{i}game-solution")" @onchange="@(e => OnChangeGameSolutionItem(e, j))">
                                            </div>
                                        </div>
                                    }
                                </div>
                                <hr/>
                                <div class="row">
                                    @for (var i = 0; i < _amountGames; i++)
                                    {
                                        var j = i;
                                        <div class="col-6">
                                            <div class="form-group">
                                                <label for="@($"solution{i}")">@_Create.RiddleSolution @(j + 1)</label>
                                                <input value="@_solutions.ElementAtOrDefault(j)" type="text" class="form-control" id="@($"solution{i}")" @onchange="@(e => OnChangeSolutionItem(e, j))">
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="row mt-4 mb-4">
                                    <div class="col">
                                        <select class="form-select" aria-label="Label" @onchange="HandleChangeLanguage">
                                            <option selected value="none">@_Create.ChangeLanguage</option>
                                            <option value="de-DE">@_Create.German</option>
                                            <option value="en-GB">@_Create.English</option>
                                            <option value="fr-FR">@_Create.French</option>
                                        </select>
                                    </div>
                                    <div class="col">
                                        <a class="btn btn-primary d-block" href="#" role="button">@_Create.Back</a>
                                    </div>
                                    <div class="col">
                                        <div class="btn btn-primary d-block" @onclick="@HandleCreate">@_Create.Create</div>
                                    </div>
                                </div>
                            }
                            <div class="row">
                                <div class="col-12 d-flex justify-content-center mt-2">
                                    <div id="qrcode" class="opacity-0"></div>
                                </div>
                            </div>
                            <div class="row text-center mt-2">
                                @if (_creationSucceeded)
                                {
                                    if (!_onlyQrCode)
                                    {
                                        <p>@_Create.CopyQrCodeMessage</p>
                                    }
                                    <div class="d-flex justify-content-center">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" onclick="@HandleOnlyShowQrCode" id="toggle">
                                            <label class="form-check-label" for="toggle">@_Create.ShowOnlyQr</label>
                                        </div>
                                    </div>
                                    if (!_onlyQrCode)
                                    {
                                        <div class="d-flex justify-content-center">
                                            <a class="btn btn-primary w-50" href="@_playUri" target="_blank" rel="noopener noreferrer">@_Create.TestPlay</a>
                                        </div>
                                    }
                                }
                            </div>
                        }
                        else
                        {
                            <div class="d-flex justify-content-center">
                                <div>
                                    @if (_showWrongPassword)
                                    {
                                        <div class="row w-100 mb-2">
                                            <div class="col-12">
                                                <div class="alert alert-warning" role="alert">
                                                    @_Create.BadPassword
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    <div class="form-group">
                                        <label for="password">@_Create.CreatorPassword</label>
                                        <input type="password" class="form-control" id="givenPassword" @bind="_givenPassword">
                                    </div>
                                    <div class="btn btn-primary mt-2" @onclick="@HandleInsertPassword">@_Create.Enter</div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private int _amountGames;
    private List<string?> _solutions = null!;
    private List<string?> _gameSolutions = null!;
    private string? _creatorPassword;
    private string? _givenPassword;
    private int _amountGroups;
    private Language _language;
    private List<IError> _errors = null!;
    private bool _isEditMode;
    private bool _creationSucceeded;
    private bool _onlyQrCode;
    private Uri? _playUri;
    private bool _isPasswordProvided;
    private bool _showWrongPassword;
        private const string QueryParameterGameData = "gameDataLockEscapeGame";

    protected override void OnInitialized()
    {
        _amountGames = 1;
        _amountGroups = 1;
        _errors = new List<IError>();
        _solutions = new List<string?> { string.Empty };
        _gameSolutions = new List<string?> { string.Empty };
        _isEditMode = false;
        _creationSucceeded = false;
        _onlyQrCode = false;
        _isPasswordProvided = true;
        _showWrongPassword = false;
        NavigationManager.TryGetQueryString(QueryParameterGameData, out string gameData);

        if (!string.IsNullOrWhiteSpace(gameData))
        {
            _isEditMode = true;
            _isPasswordProvided = false;
            DecodeGameData(gameData);
        }
    }

    private async Task HandleChangeLanguage(ChangeEventArgs @event)
    {
        if ((string)@event.Value! == "none")
            return;
        
        await LocalStorageService.SetItemAsync("culture", @event.Value!.ToString());
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    
    private void HandleInsertPassword()
    {
        if (_creatorPassword == _givenPassword)
        {
            _isPasswordProvided = true;
        }
        else
        {
            _showWrongPassword = true;
        }
    }

    private void HandleOnlyShowQrCode()
    {
        _onlyQrCode = !_onlyQrCode;
    }

    private void DecodeGameData(string queryParameterValue)
    {
        var escapeGameDto = DecodeFromQueryParametersService.DecodeToEscapeGameDto(queryParameterValue);
        _creatorPassword = escapeGameDto.CreatorPassword;
        _language = MapCultureInfoToLanguage(escapeGameDto.CultureInfo);
        _amountGames = escapeGameDto.RiddleSolutionDtos.Count();
        _amountGroups = escapeGameDto.GameSolutionForGroupDtos.Count();
        _solutions = escapeGameDto.RiddleSolutionDtos.Select(x => x.RiddleSolution).ToList();
        _gameSolutions = escapeGameDto.GameSolutionForGroupDtos.Select(x => x.GameSolution).ToList();
    }

    private void OnChangeSolutionItem(ChangeEventArgs e, int j)
    {
        var listElement = _solutions.ElementAtOrDefault(j);
        if (listElement is null)
        {
            _solutions.Add(e.Value?.ToString());
            return;
        }
        _solutions[j] = e.Value?.ToString();
    }

    private void OnChangeGameSolutionItem(ChangeEventArgs e, int j)
    {
        var listElement = _gameSolutions.ElementAtOrDefault(j);
        if (listElement is null)
        {
            _gameSolutions.Add(e.Value?.ToString());
            return;
        }
        _gameSolutions[j] = e.Value?.ToString();
    }

    private async Task HandleCreate()
    {
        _errors = new List<IError>();
        var result = CreateGameCommand.Execute(_language, _solutions, _gameSolutions, _creatorPassword);

        if (result.IsFailed)
        {
            _errors = result.Errors;
            _creationSucceeded = false;
            await JsRuntime.InvokeVoidAsync("resetQrCode");
            return;
        }

        var queryParametersEncoded = GenerateQueryParametersService.GenerateQueryParameters(result.Value);
        var currentUrl = NavigationManager.BaseUri;
        var queryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
        queryString.Add(QueryParameterGameData, queryParametersEncoded);
        var url = currentUrl + "play?" + queryString;
        await JsRuntime.InvokeVoidAsync("createQrCode", url);
        _creationSucceeded = true;
        var newEditUrl = currentUrl + "create?" + queryString;
        _playUri = new Uri(currentUrl + "play?" + queryString);
        NavigationManager.NavigateTo(newEditUrl, forceLoad: false);
    }

    private static Language MapCultureInfoToLanguage(string? cultureInfo)
    {
        return cultureInfo switch
        {
            "de-DE" => Language.German,
            "en-GB" => Language.English,
            "fr-FR" => Language.French,
            _ => Language.English
        };
    }
}