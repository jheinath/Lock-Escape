@page "/play"
@using FluentResults
@using LockEscape.Services.DecodingFromQueryParameters
@using Application.DataTransferObjects
@using Application.Ports
@using LockEscape.Pages.Components
@using LockEscape.Services.EncodingToQueryParameters
@using System.Globalization
@inject NavigationManager NavigationManager
@inject IDecodeFromQueryParametersService DecodeFromQueryParametersService
@inject IGenerateQueryParametersService GenerateQueryParametersService
@inject ISelectGroupCommand SelectGroupCommand
@inject ISolveRiddleCommand SolveRiddleCommand
@inject IResetGameCommand ResetGameCommand

<PageTitle>Lock Escape</PageTitle>

<div class="container d-flex justify-content-center align-items-center w-100">
    <div class="row g-2 w-100">
        <div class="col-12">
            <div class="card border-success bg-success rounded-0">
                <div class="card-header text-center">
                    <h4 class="text-white mb-0">
                        @if (_isTeamSelection)
                        {
                            @(_Play.SelectYourGroup)
                        }
                        else if (!IsGameFinished)
                        {
                            @(_Play.SolveTheRiddleAndOpenTheLock)
                        }
                        else
                        {
                            @($"{_Play.Group} {_escapeGameDto.GameSolutionForGroupDtos.Single(x => x.GroupNumber.ToString() == SelectedGroupNumber).GroupNumber} {_Play.FinishedLabel}")
                        }
                    </h4>
                </div>
                <div class="card-body d-flex justify-content-center container bg-white w-100">
                    <div class="row">
                        <div class="col">
                            @if (_errors.Any())
                            {
                                <div class="row">
                                    <div class="col-12">
                                        <div class="alert alert-warning" role="alert">
                                            @_errors.First().Message
                                        </div>
                                    </div>
                                </div>
                            }
                            @if (_isTeamSelection)
                            {
                                <div class="row">
                                    @foreach (var gameSolutionForGroup in _escapeGameDto.GameSolutionForGroupDtos)
                                    {
                                        <div class="col-@GetColumnSize(_escapeGameDto.GameSolutionForGroupDtos.Count()) mt-5 mb-5">
                                            <div class="btn btn-@GetColor(gameSolutionForGroup.GroupNumber) btn-lg d-block" @onclick="@(() => HandleGroupSelection(@gameSolutionForGroup.GroupNumber))">@($"{_Play.Group} {@gameSolutionForGroup.GroupNumber}")</div>
                                        </div>
                                    }
                                </div>
                            }
                            else if (!IsGameFinished)
                            {
                                <div class="row">
                                    <div class="col-12">
                                        <div class="form-group">
                                            <label for="@($"riddle{CurrentRiddleNumber}")" class="mb-4">@_Play.Riddle @(CurrentRiddleNumber + 1 + " - " + _Play.Group + " " + SelectedGroupNumber)</label>
                                            <i class="gg-lock"></i>
                                            <input @bind="_valueOne" style="z-index: 2;" type="text" pattern="[0-9]*" inputmode="numeric" maxlength="1" oninput="this.value=this.value.replace(/[^0-9]/g,'');" class="form-control ms-4 mt-4 w-25" id="@($"riddle{CurrentRiddleNumber}")">
                                            <input @bind="_valueTwo" style="z-index: 2;" type="text" pattern="[0-9]*" inputmode="numeric" maxlength="1" oninput="this.value=this.value.replace(/[^0-9]/g,'');" class="form-control ms-4 mt-2 w-25" id="@($"riddle{CurrentRiddleNumber + 1}")">
                                            <input @bind="_valueThree" style="z-index: 2;" type="text" pattern="[0-9]*" inputmode="numeric" maxlength="1" oninput="this.value=this.value.replace(/[^0-9]/g,'');" class="form-control ms-4 mt-2 mb-3 w-25" id="@($"riddle{CurrentRiddleNumber + 2}")">
                                        </div>
                                    </div>
                                </div>
                                <div class="row mt-5">
                                    <div class="col-12">
                                        <div class="btn btn-primary" @onclick="HandleTrySolveRiddle">@_Play.Open</div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="row">
                                    <div class="col-12">
                                        <div class="alert alert-success" role="alert">
                                            @_Play.SolvedMessage @_escapeGameDto.GameSolutionForGroupDtos.Single(x => x.GroupNumber.ToString() == SelectedGroupNumber).GameSolution
                                        </div>
                                    </div>
                                </div>
                                <div class="d-flex justify-content-center">
                                    <div class="btn btn-primary" @onclick="ShowRestartPopup">@_Play.ResetGame</div>
                                </div>
                                <div class="d-flex justify-content-center">
                                    <Popup @ref="_popupRef"/>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private Popup _popupRef = null!;
    private List<IError> _errors = null!;
    private EscapeGameDto _escapeGameDto = null!;
    private bool _isTeamSelection;
        private const string QueryParameterGameData = "gameDataLockEscapeGame";
    private List<string> _colors = null!;

    private int CurrentRiddleNumber => _escapeGameDto.RiddleSolutionDtos.OrderBy(x => x.RiddleSolution).Count(x => x.IsSolved);
    private string? SelectedGroupNumber => _escapeGameDto.SelectedGroupNumber;
    private string? _valueOne;
    private string? _valueTwo;
    private string? _valueThree;

    private bool IsGameFinished => _escapeGameDto.RiddleSolutionDtos.All(x => x.IsSolved);

    private string GetColor(int groupNumber)
    {
        var place = groupNumber % 10;
        return _colors.ElementAt(place);
    }

    protected override void OnInitialized()
    {
        _colors = new List<string>
        {
            "primary",
            "secondary",
            "success",
            "danger",
            "warning",
            "info",
            "primary",
            "dark",
            "success",
            "secondary",
        };
        _errors = new List<IError>();
        NavigationManager.TryGetQueryString(QueryParameterGameData, out string gameData);
        if (string.IsNullOrWhiteSpace(gameData)) return;
        _isTeamSelection = true;
        DecodeGameData(gameData);
    }
    

    private void DecodeGameData(string queryParameterValue)
    {
        _escapeGameDto = DecodeFromQueryParametersService.DecodeToEscapeGameDto(queryParameterValue);
        _isTeamSelection = _escapeGameDto.SelectedGroupNumber is null;

        ApplyGivenCulture(_escapeGameDto.CultureInfo);
    }

    private static void ApplyGivenCulture(string? cultureInfo)
    {
        var givenCulture = new CultureInfo(cultureInfo!);
        
        CultureInfo.DefaultThreadCurrentCulture = givenCulture;
        CultureInfo.DefaultThreadCurrentUICulture = givenCulture;
    }

    private static int GetColumnSize(int countItems) => countItems == 1 ? 12 : 6;

    private void ShowRestartPopup()
    {
        _popupRef.Show(_Play.PopupTextRestart, _Play.PopupLabelRestart, HandleResetGame);
    }

    private void HandleTrySolveRiddle()
    {
        var riddleNumber = CurrentRiddleNumber;
        var result = SolveRiddleCommand.Execute(_valueOne + _valueTwo + _valueThree, _escapeGameDto, riddleNumber);
        if (result.IsFailed)
        {
            _errors = result.Errors;
            return;
        }

        _errors = new List<IError>();
        var queryParametersEncoded = GenerateQueryParametersService.GenerateQueryParameters(result.Value);
        var currentUrl = NavigationManager.BaseUri;
        var queryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
        queryString.Add(QueryParameterGameData, queryParametersEncoded);
        var url = currentUrl + "play?" + queryString;
        NavigationManager.NavigateTo(url, forceLoad: false);
        DecodeGameData(queryParametersEncoded);
        ClearInputs();
    }

    private void HandleResetGame()
    {
        var result = ResetGameCommand.Execute(_escapeGameDto);
        if (result.IsFailed)
        {
            _errors = result.Errors;
            return;
        }

        _errors = new List<IError>();
        var queryParametersEncoded = GenerateQueryParametersService.GenerateQueryParameters(result.Value);
        var currentUrl = NavigationManager.BaseUri;
        var queryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
        queryString.Add(QueryParameterGameData, queryParametersEncoded);
        var url = currentUrl + "play?" + queryString;
        NavigationManager.NavigateTo(url, forceLoad: false);
        DecodeGameData(queryParametersEncoded);
        StateHasChanged();
    }

    private void HandleGroupSelection(int groupNumber)
    {
        var result = SelectGroupCommand.Execute(groupNumber, _escapeGameDto);

        if (result.IsFailed)
        {
            _errors = result.Errors;
            return;
        }

        _isTeamSelection = false;
        var queryParametersEncoded = GenerateQueryParametersService.GenerateQueryParameters(result.Value);
        var currentUrl = NavigationManager.BaseUri;
        var queryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
        queryString.Add(QueryParameterGameData, queryParametersEncoded);
        var url = currentUrl + "play?" + queryString;
        NavigationManager.NavigateTo(url, forceLoad: false);
        DecodeGameData(queryParametersEncoded);
    }

    private void ClearInputs()
    {
        _valueOne = string.Empty;
        _valueTwo = string.Empty;
        _valueThree = string.Empty;
    }
}